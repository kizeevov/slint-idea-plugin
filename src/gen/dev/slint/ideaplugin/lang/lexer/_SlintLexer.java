/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package dev.slint.ideaplugin.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.slint.ideaplugin.lang.psi.SlintElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/kizeev/projects/slint-idea-plugin/slint-idea-plugin/src/main/grammars/SlintLexer.flex</tt>
 */
public class _SlintLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\13\4\2\22\0\1\13\1\54\1\5\4\0\1\3\1\45\1\46\1\15\1\0\1\56\1\6\1\10"+
    "\1\14\12\7\1\52\2\0\1\51\1\0\1\53\1\55\4\11\1\57\25\11\1\47\1\4\1\50\1\0\1"+
    "\12\1\0\1\36\1\35\1\31\1\11\1\25\1\24\1\33\1\37\1\16\1\11\1\41\1\34\1\17\1"+
    "\32\1\21\1\20\1\11\1\22\1\27\1\23\1\30\1\42\1\11\1\26\1\40\1\11\1\43\1\0\1"+
    "\44\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\1"+
    "\13\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\5\1\0\1\22"+
    "\4\0\1\23\1\0\1\5\1\24\1\25\17\5\1\26"+
    "\1\5\1\3\1\0\7\5\1\27\2\5\1\30\13\5"+
    "\1\31\5\5\1\32\3\5\1\33\2\5\1\34\30\5"+
    "\1\35\1\36\3\5\1\37\1\40\2\5\1\41\1\42"+
    "\1\43\2\5\1\44\3\5\1\45\5\5\1\46\1\5"+
    "\1\47\1\50\1\5\1\51\1\5\1\52\2\5\1\53"+
    "\2\5\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\60"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\u03c0"+
    "\0\60\0\u03f0\0\220\0\60\0\u0420\0\300\0\u0450\0\u0480"+
    "\0\u04b0\0\u04e0\0\u0510\0\u0150\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u07e0\0\u0810\0\60\0\u0840\0\u0480\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u0150"+
    "\0\u09f0\0\u0a20\0\u0150\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u04e0\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0150\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0150\0\u0de0\0\u0e10\0\u0150\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u0150\0\u0150\0\u12c0\0\u12f0"+
    "\0\u1320\0\u0150\0\u0150\0\u1350\0\u1380\0\u0150\0\u0150\0\u0150"+
    "\0\u13b0\0\u13e0\0\u0150\0\u1410\0\u1440\0\u1470\0\u0150\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u0150\0\u1590\0\u0150\0\u0150"+
    "\0\u15c0\0\u0150\0\u15f0\0\u0150\0\u1620\0\u1650\0\u0150\0\u1680"+
    "\0\u16b0\0\u0150\0\u0150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\3\1\12\1\2\1\13\1\11\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\11\1\22\1\11"+
    "\1\23\1\11\1\24\2\11\1\25\4\11\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\62\0\1\3\10\0\1\3\44\0"+
    "\3\43\1\44\1\45\53\43\4\46\1\47\1\44\52\46"+
    "\7\0\1\7\57\0\1\7\1\50\55\0\2\11\1\0"+
    "\2\11\3\0\25\11\14\0\1\11\14\0\1\51\1\52"+
    "\50\0\2\11\1\0\2\11\3\0\1\11\1\53\4\11"+
    "\1\54\5\11\1\55\10\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\4\11\1\56\5\11\1\57\12\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\12\11"+
    "\1\60\12\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\7\11\1\61\15\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\4\11\1\62\20\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\3\11\1\63\1\64"+
    "\5\11\1\65\12\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\10\11\1\66\3\11\1\67\10\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\5\11\1\70"+
    "\17\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\3\11\1\71\14\11\1\72\4\11\14\0\1\11\6\0"+
    "\2\11\1\0\2\11\3\0\16\11\1\73\6\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\14\11\1\74"+
    "\10\11\14\0\1\11\55\0\1\75\10\0\2\11\1\0"+
    "\2\11\3\0\10\11\1\76\14\11\14\0\1\11\1\43"+
    "\2\0\55\43\1\46\2\0\55\46\7\0\1\77\50\0"+
    "\1\51\2\0\55\51\1\52\2\0\12\52\1\100\42\52"+
    "\6\0\2\11\1\0\2\11\3\0\2\11\1\101\22\11"+
    "\14\0\1\11\6\0\1\102\1\11\1\0\2\11\3\0"+
    "\21\11\1\103\3\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\1\104\2\11\1\105\21\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\4\11\1\106\12\11"+
    "\1\107\5\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\5\11\1\110\17\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\5\11\1\111\17\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\20\11\1\112\4\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\4\11"+
    "\1\113\20\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\3\11\1\114\21\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\14\11\1\115\10\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\2\11\1\116\22\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\12\11"+
    "\1\117\12\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\4\11\1\120\13\11\1\121\4\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\1\11\1\122\23\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\16\11"+
    "\1\123\6\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\3\11\1\124\21\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\1\125\24\11\14\0\1\11\6\0"+
    "\2\11\1\0\2\11\3\0\2\11\1\126\22\11\14\0"+
    "\1\11\1\52\2\0\11\52\1\127\1\100\42\52\6\0"+
    "\2\11\1\0\2\11\3\0\3\11\1\130\21\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\3\11\1\131"+
    "\21\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\7\11\1\132\15\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\24\11\1\133\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\2\11\1\134\22\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\7\11\1\135\15\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\16\11"+
    "\1\136\6\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\12\11\1\137\12\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\14\11\1\140\10\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\1\11\1\141\23\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\13\11"+
    "\1\142\11\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\3\11\1\143\21\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\1\11\1\144\23\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\12\11\1\145\12\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\5\11"+
    "\1\146\17\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\2\11\1\147\22\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\16\11\1\150\6\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\17\11\1\151\5\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\1\11"+
    "\1\152\23\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\4\11\1\153\20\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\4\11\1\154\20\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\12\11\1\155\12\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\4\11"+
    "\1\156\20\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\20\11\1\157\4\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\7\11\1\160\15\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\1\161\24\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\4\11\1\162"+
    "\20\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\11\11\1\163\13\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\5\11\1\164\17\11\14\0\1\11\6\0"+
    "\2\11\1\0\2\11\3\0\4\11\1\165\20\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\13\11\1\166"+
    "\11\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\7\11\1\167\15\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\3\11\1\170\21\11\14\0\1\11\6\0"+
    "\2\11\1\0\2\11\3\0\17\11\1\171\5\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\20\11\1\172"+
    "\4\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\20\11\1\173\4\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\7\11\1\174\15\11\14\0\1\11\6\0"+
    "\2\11\1\0\2\11\3\0\5\11\1\175\17\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\5\11\1\176"+
    "\17\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\1\177\24\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\5\11\1\200\17\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\4\11\1\201\20\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\13\11\1\202\11\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\14\11"+
    "\1\203\10\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\1\204\24\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\1\205\24\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\5\11\1\206\17\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\5\11\1\207\17\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\11\11"+
    "\1\210\13\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\14\11\1\211\10\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\20\11\1\212\4\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\16\11\1\213\6\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\5\11"+
    "\1\214\17\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\11\11\1\215\13\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\5\11\1\216\17\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\7\11\1\217\15\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\5\11"+
    "\1\220\17\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\5\11\1\221\17\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\3\11\1\222\21\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\7\11\1\223\15\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\13\11"+
    "\1\224\11\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\7\11\1\225\15\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\11\11\1\226\13\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\11\11\1\227\13\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\22\11"+
    "\1\230\2\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\1\231\24\11\14\0\1\11\6\0\2\11\1\0"+
    "\2\11\3\0\14\11\1\232\10\11\14\0\1\11\6\0"+
    "\2\11\1\0\2\11\3\0\14\11\1\233\10\11\14\0"+
    "\1\11\6\0\2\11\1\0\2\11\3\0\23\11\1\234"+
    "\1\11\14\0\1\11\6\0\2\11\1\0\2\11\3\0"+
    "\1\235\24\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\3\11\1\236\21\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\5\11\1\237\17\11\14\0\1\11"+
    "\6\0\2\11\1\0\2\11\3\0\3\11\1\240\21\11"+
    "\14\0\1\11\6\0\2\11\1\0\2\11\3\0\14\11"+
    "\1\241\10\11\14\0\1\11\6\0\2\11\1\0\2\11"+
    "\3\0\14\11\1\242\10\11\14\0\1\11\6\0\2\11"+
    "\1\0\2\11\3\0\11\11\1\243\13\11\14\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\15\1\12\11\1\1\1\11"+
    "\1\1\1\0\1\11\4\0\1\1\1\0\22\1\1\11"+
    "\2\1\1\0\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[163];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SlintLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SlintLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 46: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 47: break;
          case 3: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 48: break;
          case 4: 
            { return DOT;
            } 
            // fall through
          case 49: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 50: break;
          case 6: 
            { return LBRACE;
            } 
            // fall through
          case 51: break;
          case 7: 
            { return RBRACE;
            } 
            // fall through
          case 52: break;
          case 8: 
            { return LPAREN;
            } 
            // fall through
          case 53: break;
          case 9: 
            { return RPAREN;
            } 
            // fall through
          case 54: break;
          case 10: 
            { return LBRACKET;
            } 
            // fall through
          case 55: break;
          case 11: 
            { return RBRACKET;
            } 
            // fall through
          case 56: break;
          case 12: 
            { return EQ;
            } 
            // fall through
          case 57: break;
          case 13: 
            { return COLON;
            } 
            // fall through
          case 58: break;
          case 14: 
            { return QUEST;
            } 
            // fall through
          case 59: break;
          case 15: 
            { return EXCL;
            } 
            // fall through
          case 60: break;
          case 16: 
            { return AT;
            } 
            // fall through
          case 61: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 62: break;
          case 18: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 63: break;
          case 19: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 64: break;
          case 20: 
            { return IF;
            } 
            // fall through
          case 65: break;
          case 21: 
            { return IN;
            } 
            // fall through
          case 66: break;
          case 22: 
            { return ATAT;
            } 
            // fall through
          case 67: break;
          case 23: 
            { return OUT;
            } 
            // fall through
          case 68: break;
          case 24: 
            { return FOR;
            } 
            // fall through
          case 69: break;
          case 25: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 70: break;
          case 26: 
            { return PURE;
            } 
            // fall through
          case 71: break;
          case 27: 
            { return FROM;
            } 
            // fall through
          case 72: break;
          case 28: 
            { return ENUM;
            } 
            // fall through
          case 73: break;
          case 29: 
            { return IMPORT;
            } 
            // fall through
          case 74: break;
          case 30: 
            { return IN_OUNT;
            } 
            // fall through
          case 75: break;
          case 31: 
            { return PUBLIC;
            } 
            // fall through
          case 76: break;
          case 32: 
            { return RETURN;
            } 
            // fall through
          case 77: break;
          case 33: 
            { return EXPORT;
            } 
            // fall through
          case 78: break;
          case 34: 
            { return STRUCT;
            } 
            // fall through
          case 79: break;
          case 35: 
            { return STATES;
            } 
            // fall through
          case 80: break;
          case 36: 
            { return GLOBAL;
            } 
            // fall through
          case 81: break;
          case 37: 
            { return PRIVATE;
            } 
            // fall through
          case 82: break;
          case 38: 
            { return ANIMATE;
            } 
            // fall through
          case 83: break;
          case 39: 
            { return INHERITS;
            } 
            // fall through
          case 84: break;
          case 40: 
            { return PROPERTY;
            } 
            // fall through
          case 85: break;
          case 41: 
            { return FUNCTION;
            } 
            // fall through
          case 86: break;
          case 42: 
            { return CALLBACK;
            } 
            // fall through
          case 87: break;
          case 43: 
            { return COMPONENT;
            } 
            // fall through
          case 88: break;
          case 44: 
            { return EXPRESSION;
            } 
            // fall through
          case 89: break;
          case 45: 
            { return TRANSITIONS;
            } 
            // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
