/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package dev.slint.ideaplugin.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.slint.ideaplugin.lang.psi.SlintElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/kizeev/projects/slint-idea-plugin/slint-idea-plugin/src/main/grammars/SlintLexer.flex</tt>
 */
public class _SlintLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\13\4\2\22\0\1\13\1\54\1\5\4\0\1\3\1\47\1\50\1\17\1\0\1\56\1\6\1\10"+
    "\1\16\12\7\1\14\2\0\1\15\1\0\1\53\1\55\32\11\1\51\1\4\1\52\1\0\1\12\1\0\1"+
    "\40\1\37\1\33\1\11\1\27\1\26\1\35\1\41\1\20\1\11\1\43\1\36\1\21\1\34\1\23"+
    "\1\22\1\11\1\24\1\31\1\25\1\32\1\44\1\11\1\30\1\42\1\11\1\45\1\0\1\46\7\0"+
    "\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\1\13\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\0\1\22"+
    "\5\0\1\23\1\0\1\24\1\25\1\0\1\5\1\26"+
    "\1\27\17\5\1\3\1\30\1\0\7\5\1\31\2\5"+
    "\1\32\12\5\1\33\5\5\1\34\3\5\1\35\2\5"+
    "\1\36\26\5\1\37\1\40\3\5\1\41\1\42\2\5"+
    "\1\43\1\44\1\45\2\5\1\46\2\5\1\47\5\5"+
    "\1\50\1\51\1\52\1\5\1\53\1\5\1\54\1\5"+
    "\1\55\1\5\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\57"+
    "\0\u0149\0\u0178\0\u01a7\0\57\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\215\0\57\0\u040a\0\274\0\u0439\0\u0468"+
    "\0\u0497\0\u04c6\0\u0178\0\57\0\u04f5\0\u0524\0\u0553\0\u0149"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0468\0\57\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u09bb\0\u0149\0\u09ea\0\u0a19\0\u0149\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0524\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0149\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0149\0\u0d96\0\u0dc5\0\u0149\0\u0df4\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u0149\0\u0149\0\u11fe\0\u122d"+
    "\0\u125c\0\u0149\0\u0149\0\u128b\0\u12ba\0\u0149\0\u0149\0\u0149"+
    "\0\u12e9\0\u1318\0\u0149\0\u1347\0\u1376\0\u0149\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u0149\0\u0149\0\u0149\0\u1490\0\u0149"+
    "\0\u14bf\0\u0149\0\u14ee\0\u0149\0\u151d\0\u0149";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\2\1\16"+
    "\1\11\1\17\1\20\1\21\1\22\1\23\1\24\1\11"+
    "\1\25\1\11\1\26\1\11\1\27\2\11\1\30\4\11"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\61\0\1\3\10\0\1\3\43\0\3\43"+
    "\1\44\1\45\52\43\4\46\1\47\1\44\51\46\7\0"+
    "\1\7\56\0\1\7\1\50\50\0\1\51\3\0\2\11"+
    "\1\0\2\11\1\51\1\52\3\0\25\11\14\0\1\51"+
    "\3\0\2\53\1\0\2\53\1\51\1\52\3\0\25\53"+
    "\27\0\1\54\57\0\1\55\1\56\41\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\1\11\1\57"+
    "\4\11\1\60\5\11\1\61\10\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\4\11\1\62"+
    "\5\11\1\63\12\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\12\11\1\64\12\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\7\11\1\65\15\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\4\11\1\66\20\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\3\11\1\67\1\70\5\11\1\71\12\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\10\11"+
    "\1\72\3\11\1\73\10\11\14\0\1\51\3\0\2\11"+
    "\1\0\2\11\1\51\1\52\3\0\5\11\1\74\17\11"+
    "\14\0\1\51\3\0\2\11\1\0\2\11\1\51\1\52"+
    "\3\0\3\11\1\75\14\11\1\76\4\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\16\11"+
    "\1\77\6\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\14\11\1\100\10\11\12\0\1\43"+
    "\2\0\54\43\1\46\2\0\54\46\7\0\1\101\51\0"+
    "\1\51\10\0\1\51\1\52\57\0\1\102\41\0\1\55"+
    "\2\0\54\55\1\56\2\0\14\56\1\103\37\56\2\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\2\11\1\104\22\11\14\0\1\51\3\0\1\105\1\11"+
    "\1\0\2\11\1\51\1\52\3\0\21\11\1\106\3\11"+
    "\14\0\1\51\3\0\2\11\1\0\2\11\1\51\1\52"+
    "\3\0\1\107\2\11\1\110\21\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\4\11\1\111"+
    "\12\11\1\112\5\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\5\11\1\113\17\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\5\11\1\114\17\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\20\11\1\115\4\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\4\11\1\116\20\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\3\11\1\117\21\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\14\11\1\120\10\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\2\11\1\121\22\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\12\11\1\122\12\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\4\11\1\123\13\11\1\124"+
    "\4\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\1\11\1\125\23\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\16\11\1\126"+
    "\6\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\3\11\1\127\21\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\1\130\24\11"+
    "\12\0\1\56\2\0\13\56\1\131\1\103\37\56\2\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\3\11\1\132\21\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\3\11\1\133\21\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\7\11\1\134\15\11\14\0\1\51\3\0\2\11\1\0"+
    "\2\11\1\51\1\52\3\0\24\11\1\135\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\2\11"+
    "\1\136\22\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\7\11\1\137\15\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\16\11"+
    "\1\140\6\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\12\11\1\141\12\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\14\11"+
    "\1\142\10\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\1\11\1\143\23\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\13\11"+
    "\1\144\11\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\3\11\1\145\21\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\1\11"+
    "\1\146\23\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\12\11\1\147\12\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\5\11"+
    "\1\150\17\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\2\11\1\151\22\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\16\11"+
    "\1\152\6\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\17\11\1\153\5\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\1\11"+
    "\1\154\23\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\4\11\1\155\20\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\12\11"+
    "\1\156\12\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\4\11\1\157\20\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\20\11"+
    "\1\160\4\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\7\11\1\161\15\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\1\162"+
    "\24\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\4\11\1\163\20\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\11\11\1\164"+
    "\13\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\5\11\1\165\17\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\4\11\1\166"+
    "\20\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\13\11\1\167\11\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\7\11\1\170"+
    "\15\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\3\11\1\171\21\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\17\11\1\172"+
    "\5\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\20\11\1\173\4\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\20\11\1\174"+
    "\4\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\5\11\1\175\17\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\5\11\1\176"+
    "\17\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\1\177\24\11\14\0\1\51\3\0\2\11"+
    "\1\0\2\11\1\51\1\52\3\0\5\11\1\200\17\11"+
    "\14\0\1\51\3\0\2\11\1\0\2\11\1\51\1\52"+
    "\3\0\4\11\1\201\20\11\14\0\1\51\3\0\2\11"+
    "\1\0\2\11\1\51\1\52\3\0\13\11\1\202\11\11"+
    "\14\0\1\51\3\0\2\11\1\0\2\11\1\51\1\52"+
    "\3\0\14\11\1\203\10\11\14\0\1\51\3\0\2\11"+
    "\1\0\2\11\1\51\1\52\3\0\1\204\24\11\14\0"+
    "\1\51\3\0\2\11\1\0\2\11\1\51\1\52\3\0"+
    "\1\205\24\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\5\11\1\206\17\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\5\11"+
    "\1\207\17\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\11\11\1\210\13\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\14\11"+
    "\1\211\10\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\20\11\1\212\4\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\16\11"+
    "\1\213\6\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\5\11\1\214\17\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\5\11"+
    "\1\215\17\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\7\11\1\216\15\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\5\11"+
    "\1\217\17\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\5\11\1\220\17\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\3\11"+
    "\1\221\21\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\7\11\1\222\15\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\13\11"+
    "\1\223\11\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\7\11\1\224\15\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\11\11"+
    "\1\225\13\11\14\0\1\51\3\0\2\11\1\0\2\11"+
    "\1\51\1\52\3\0\22\11\1\226\2\11\14\0\1\51"+
    "\3\0\2\11\1\0\2\11\1\51\1\52\3\0\1\227"+
    "\24\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\14\11\1\230\10\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\14\11\1\231"+
    "\10\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\23\11\1\232\1\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\3\11\1\233"+
    "\21\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\5\11\1\234\17\11\14\0\1\51\3\0"+
    "\2\11\1\0\2\11\1\51\1\52\3\0\14\11\1\235"+
    "\10\11\14\0\1\51\3\0\2\11\1\0\2\11\1\51"+
    "\1\52\3\0\11\11\1\236\13\11\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\3\1\1\11\14\1\12\11"+
    "\1\0\1\11\5\0\1\1\1\0\1\11\1\1\1\0"+
    "\23\1\1\11\1\0\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SlintLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SlintLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 47: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 48: break;
          case 3: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 49: break;
          case 4: 
            { return DOT;
            } 
            // fall through
          case 50: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 51: break;
          case 6: 
            { return COLON;
            } 
            // fall through
          case 52: break;
          case 7: 
            { return EQ;
            } 
            // fall through
          case 53: break;
          case 8: 
            { return LBRACE;
            } 
            // fall through
          case 54: break;
          case 9: 
            { return RBRACE;
            } 
            // fall through
          case 55: break;
          case 10: 
            { return LPAREN;
            } 
            // fall through
          case 56: break;
          case 11: 
            { return RPAREN;
            } 
            // fall through
          case 57: break;
          case 12: 
            { return LBRACKET;
            } 
            // fall through
          case 58: break;
          case 13: 
            { return RBRACKET;
            } 
            // fall through
          case 59: break;
          case 14: 
            { return QUEST;
            } 
            // fall through
          case 60: break;
          case 15: 
            { return EXCL;
            } 
            // fall through
          case 61: break;
          case 16: 
            { return AT;
            } 
            // fall through
          case 62: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 63: break;
          case 18: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 64: break;
          case 19: 
            { return PARAMETER_LITERAL;
            } 
            // fall through
          case 65: break;
          case 20: 
            { return COLONEQ;
            } 
            // fall through
          case 66: break;
          case 21: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 67: break;
          case 22: 
            { return IF;
            } 
            // fall through
          case 68: break;
          case 23: 
            { return IN;
            } 
            // fall through
          case 69: break;
          case 24: 
            { return TYPE_LITERAL;
            } 
            // fall through
          case 70: break;
          case 25: 
            { return OUT;
            } 
            // fall through
          case 71: break;
          case 26: 
            { return FOR;
            } 
            // fall through
          case 72: break;
          case 27: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 73: break;
          case 28: 
            { return PURE;
            } 
            // fall through
          case 74: break;
          case 29: 
            { return FROM;
            } 
            // fall through
          case 75: break;
          case 30: 
            { return ENUM;
            } 
            // fall through
          case 76: break;
          case 31: 
            { return IMPORT;
            } 
            // fall through
          case 77: break;
          case 32: 
            { return IN_OUNT;
            } 
            // fall through
          case 78: break;
          case 33: 
            { return PUBLIC;
            } 
            // fall through
          case 79: break;
          case 34: 
            { return RETURN;
            } 
            // fall through
          case 80: break;
          case 35: 
            { return EXPORT;
            } 
            // fall through
          case 81: break;
          case 36: 
            { return STRUCT;
            } 
            // fall through
          case 82: break;
          case 37: 
            { return STATES;
            } 
            // fall through
          case 83: break;
          case 38: 
            { return GLOBAL;
            } 
            // fall through
          case 84: break;
          case 39: 
            { return PRIVATE;
            } 
            // fall through
          case 85: break;
          case 40: 
            { return ANIMATE;
            } 
            // fall through
          case 86: break;
          case 41: 
            { return INHERITS;
            } 
            // fall through
          case 87: break;
          case 42: 
            { return PROPERTY;
            } 
            // fall through
          case 88: break;
          case 43: 
            { return FUNCTION;
            } 
            // fall through
          case 89: break;
          case 44: 
            { return CALLBACK;
            } 
            // fall through
          case 90: break;
          case 45: 
            { return COMPONENT;
            } 
            // fall through
          case 91: break;
          case 46: 
            { return TRANSITIONS;
            } 
            // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
