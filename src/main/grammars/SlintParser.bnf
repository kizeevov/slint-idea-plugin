{
  parserClass='dev.slint.ideaplugin.lang.parser.SlintParser'
  parserUtilClass="dev.slint.ideaplugin.lang.parser.SlintParserUtil"

  implements='dev.slint.ideaplugin.lang.psi.SlintElement'
  extends='dev.slint.ideaplugin.lang.psi.impl.SlintElementImpl'

  elementTypeHolderClass='dev.slint.ideaplugin.lang.psi.SlintElementTypes'
  elementTypeClass='dev.slint.ideaplugin.lang.psi.SlintElementType'
  tokenTypeClass='dev.slint.ideaplugin.lang.psi.SlintTokenType'

  psiClassPrefix='Slint'
  psiImplClassSuffix='Impl'
  psiPackage='dev.slint.ideaplugin.lang.psi'
  psiImplPackage='dev.slint.ideaplugin.lang.psi.impl'

  tokens=[
    IMPORT          = 'import'
    FROM            = 'from'
    EXPORT          = 'export'
    STRUCT          = 'struct'
    ENUM            = 'enum'
    GLOBAL          = 'global'
    COMPONENT       = 'component'
    INHERITS        = 'inherits'

    PROPERTY        = 'property'
    CALLBACK        = 'callback'
    ANIMATE         = 'animate'
    STATES          = 'states'
    TRANSITIONS     = 'transitions'
    PRIVATE         = 'private'
    PUBLIC          = 'public'
    PROTECTED       = 'protected'
    PURE            = 'pure'
    FUNCTION        = 'function'
    IN              = 'in'
    OUT             = 'out'
    IN_OUNT         = 'in-out'
    CHANGED         = 'changed'

    IF              = 'if'
    ELSE            = 'else'
    ELSE_IF         = 'else if'
    FOR             = 'for'
    RETURN          = 'return'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    EQ              = '='
    SEMICOLON       = ';'
    QUEST           = '?'
    COMMA           = ','

    ADDITION        = '+'
    SUBTRACTION     = '-'
    MULTIPLY        = '*'
    DIVIDE          = '/'
    MODULO          = '%'
    FLOOR_DIVIDE    = '\'
    MINUS_EQ        = "-="
    PLUS_EQ         = "+="
    DIV_EQ          = "/="
    MUL_EQ          = "*="

    AND             = '&&'
    OR              = '||'
    NOT             = '!'

    EQUAL = '=='
    NOT_EQUAL = '!='
    LESS_THAN = '<'
    LESS_THAN_OR_EQUAL = '<='
    GREATER_THAN = '>'
    GREATER_THAN_OR_EQUAL = '>='

    STRING_LITERAL  = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    COLOR_LITERAL   = 'regexp:#([A-Fa-f0-9]{6,8}|[A-Fa-f0-9]{3,4})'
    IDENTIFIER      = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*'
    WHITE_SPACE     = 'regexp:\s+'

    LINE_COMMENT = 'regexp://.*'
    DOC_COMMENT = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
  ]

  extends(".*Expression")=Expression
}

Schema ::= Declaration*

private Declaration ::=
    ImportDefinition
    | ExportDefinition
    | GlobalDefinition
    | ComponentDefinition
    | EnumDefinition
    | StructDefinition
    {
        pin=1
        recoverWhile=Declaration_recover
    }
private Declaration_recover ::= !TopLevelKeywords
private TopLevelKeywords ::= EXPORT | IMPORT | STRUCT | COMPONENT | GLOBAL | ENUM

///////////////////////////////////////////////////////////////////////////////////////////////////
// Import/Export
///////////////////////////////////////////////////////////////////////////////////////////////////
private ExportDefinition ::= EXPORT (ComponentDefinition | EnumDefinition | StructDefinition | GlobalDefinition | ExportComponentDefinition) {
    pin=2
}
private ExportComponentDefinition ::= '{' Expression (',' (Expression | &'}'))* '}' {
    recoverWhile=Declaration_recover
}


ImportDefinition ::= IMPORT ImportElementDefinitionBlock? ImportPathDeclaration ';'
private ImportPathDeclaration ::= STRING_LITERAL
private ImportElementDefinitionBlock ::= '{' (ComponentName ','?)* '}' FROM

///////////////////////////////////////////////////////////////////////////////////////////////////
// Global
///////////////////////////////////////////////////////////////////////////////////////////////////
GlobalDefinition ::= GLOBAL ComponentName GlobalBody {
    pin=2
}
private GlobalBody ::= '{' ComponentMembers '}' {
   pin=1
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Component
///////////////////////////////////////////////////////////////////////////////////////////////////
ComponentDefinition ::= COMPONENT ComponentName ComponentInheritsDeclaration? ComponentBody {
    pin=2
}
private ComponentInheritsDeclaration ::= INHERITS ComponentName {
    pin=2
}
ComponentBody ::= '{' ComponentMembers '}' {
    pin=1
}
private ComponentMembers ::= ComponentMemberDefinition* {
    recoverWhile="simple_scope_recover"
}
private ComponentMemberDefinition ::=
    InternalComponentDeclaration
    | PropertyDeclaration
    | PropertyInitDeclaration
    | PropertyBindingDeclaration
    | PropertyDefinition
    | CallbackDefinition
    | CallbackDeclaration
    | ChangedCallbackDeclaration
    | AnimateDeclaration
    | StatesDefinition
    | FunctionDefinition
    | ChildrenFunction
    | RepetitionDefinition
    | ConditionalDefinition
{
    recoverWhile="ComponentMember_recover"
}
private ComponentMember_recover ::=
!(
    Identifier
    | PropertyDefinitionModifiers
    | PROPERTY
    | PURE
    | CALLBACK
    | CHANGED
    | ANIMATE
    | STATES
    | PUBLIC
    | PRIVATE
    | PROTECTED
    | FUNCTION
    | ChildrenFunction
    | FOR
    | IF
    | '}'
)

private InternalComponentDeclaration ::= ComponentName InternalComponentBody
InternalComponentBody ::= '{' ComponentMembers '}' {
    pin=1
}

// Property
private PropertyDeclaration ::= FieldIdentifier Expression ';'
private PropertyInitDeclaration ::= FieldIdentifier '=' InternalComponentDeclaration {
    pin=2
}
private PropertyBindingDeclaration ::= Identifier '<=>' Expression ';' { pin=2 }

private PropertyDefinition ::= PropertyDefinitionModifiers? PROPERTY PropertyDefinitionType? Identifier PropertyDefinitionInit? ';' {
    pin=2
}
private PropertyDefinitionModifiers ::= PRIVATE | IN | OUT | IN_OUNT
private PropertyDefinitionType ::= '<' Type '>'
private PropertyDefinitionInit::= (':' | '<=>') Expression

// Callback
private CallbackDefinition ::= PURE? CALLBACK Identifier (CallbackParametersDeclaration | CallbackBindingDeclaration)? ';' {
    pin=3
}
private CallbackParametersDeclaration ::= '(' CallbackParameter? (',' (CallbackParameter | &')'))* ')' CallbackReturnDeclaration? {
    pin(".*")=1
}
private CallbackParameter ::= CallbackNamedParameter | Type
private CallbackNamedParameter ::= Identifier ':' Type {
    pin=3
}
private CallbackReturnDeclaration ::= '->' Type { pin=2 }
private CallbackBindingDeclaration ::= '<=>' PropertyExpression


private CallbackDeclaration ::= Identifier CallArgumentList? '=>' CallbackBody {
    pin=3
}
CallbackBody ::= '{' CallbackMembers '}'
private CallbackMembers ::= FunctionMemberDefinition* {
    recoverWhile="simple_scope_recover"
}

// Changed callback
private ChangedCallbackDeclaration ::= CHANGED Identifier CallArgumentList? '=>' CallbackBody {
    pin=4
}

// Animate
private AnimateDeclaration ::= ANIMATE AnimatePropertyName AnimateBody {
    pin=2
}
private AnimatePropertyName ::= (PropertyExpression | '*' ) (',' Expression)* {
    pin(".*")=1
}
AnimateBody ::= '{' AnimateMembers '}' {
    pin=1
}
private AnimateMembers ::= AnimateMemberDefinition* {
   recoverWhile="simple_scope_recover"
}
private AnimateMemberDefinition ::=
    PropertyDeclaration
{
    recoverWhile="AnimateMember_recover"
}
private AnimateMember_recover ::= !(Identifier | '}')

// States
private StatesDefinition ::= STATES StatesBody
StatesBody ::= '[' StateMembers ']' {
    pin=1
}
private StateMembers ::= StateMemberDefinition* {
    recoverWhile="StateMembers_recover"
}
private StateMembers_recover  ::= !']'
private StateMemberDefinition ::=
    StateDeclaration
{
    recoverWhile="StateMember_recover"
}
private StateMember_recover ::= !(Identifier | ']')
private StateDeclaration ::= Identifier 'when' Expression ':' StateDeclarationBlock {
    pin=4
}
private StateDeclarationBlock ::= '{' StateDeclarationBlockItems* '}' {
    pin=1
}
private StateDeclarationBlockItems ::=
    StatePropertyDeclaration
    | StateTransitionDeclaration
{
    recoverWhile="StateDeclarationBlockItems_recover"
}
private StateDeclarationBlockItems_recover ::=
!(
    Identifier
    | PropertyExpression
    | IN
    | OUT
    | '}'
    | ']'
)
private StatePropertyDeclaration ::= PropertyExpression ':' Expression SEMICOLON
private StateTransitionDeclaration ::= (IN | OUT) StateTransitionDeclarationBlock
private StateTransitionDeclarationBlock ::= LBRACE StateTransitionDeclarationBlockItems* RBRACE
private StateTransitionDeclarationBlockItems ::= AnimateDeclaration

// Functions
private FunctionDefinition ::= FunctionDefinitionModifiers? PURE? FUNCTION Identifier FunctionDefinitionArgumentList FunctionReturnDefinition? FunctionBody {
    pin=4
}
private FunctionDefinitionModifiers ::= PUBLIC | PROTECTED
private FunctionReturnDefinition ::= '->' Type { pin=2 }
private FunctionDefinitionArgumentList ::= '(' FunctionArgument? (',' (FunctionArgument | &')'))* ')' {
    pin(".*")=1
}
private FunctionArgument ::= Identifier ':' Type

FunctionBody ::=  '{' FunctionMembers '}' {
    pin=1
}
private FunctionMembers ::=  FunctionMemberDefinition* {
    recoverWhile="simple_scope_recover"
}

private FunctionMemberDefinition ::=
    FunctionReturnDeclaration
    | FunctionExpressionDeclaration
    | IfDeclaration
{
    recoverWhile="FunctionMember_recover"
}
private FunctionMember_recover ::=
!(
    RETURN
    | IF
    | Expression
    | '}'
)
private FunctionReturnDeclaration ::= RETURN Expression SEMICOLON?
private FunctionExpressionDeclaration ::= Expression SEMICOLON?

private IfDeclaration ::= IF '(' Expression ')' IfBody ElIfBlock* (ELSE IfBody)? { pin=2 }
private IfBody ::= '{' FunctionMembers '}'
private ElIfBlock ::= ELSE_IF '(' Expression ')' IfBody

// Repetition
private RepetitionDefinition ::= FOR Expression IN Expression ':' {
    pin=3
}

// Conditional
private ConditionalDefinition ::= IF Expression ':' {
    pin=1
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Enum
///////////////////////////////////////////////////////////////////////////////////////////////////
EnumDefinition ::= ENUM ComponentName '{' Identifier (',' Identifier)* '}' {
    pin=2
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct
///////////////////////////////////////////////////////////////////////////////////////////////////
StructDefinition ::= STRUCT ComponentName StructBody
StructBody ::= '{' StructMembers '}' { pin=1 }
private StructMembers ::= StructMemberDefinition* {
    recoverWhile="simple_scope_recover"
}

private StructMemberDefinition ::=
    StructFieldDeclaration
{
    recoverWhile="StructMember_recover"
}
private StructMember_recover ::= !(Identifier | '}')

private StructFieldDeclaration ::= FieldIdentifier Type ','? { pin=2 }

private AnonymousStructDefinition ::= StructBody

private AnonymousStructDeclaration ::= AnonymousStructBody
AnonymousStructBody ::= '{' AnonymousStructMembers '}' { pin=1 }
private AnonymousStructMembers ::= AnonymousStructMemberDefinition* {
    recoverWhile="simple_scope_recover"
}
private AnonymousStructMemberDefinition ::=
    AnonymousStructFieldDeclaration
{
    recoverWhile="AnonymousStructMember_recover"
}
private AnonymousStructMember_recover ::= !(Identifier | '}')
private AnonymousStructFieldDeclaration ::= FieldIdentifier Expression ','? { pin=2 }
private ArrayAnonymousStruct ::= '[' AnonymousStructDeclaration? (',' (AnonymousStructDeclaration | &']'))* ']'

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Expressions
/////////////////////////////////////////////////////////////////////////////////////////////////////
Expression ::=
    AssignmentExpression
    | BinaryExpression
    | UnaryExpression
    | TernaryExpression
    | CallBuiltinExpression
    | CallExpression
    | PropertyExpression
    | LiteralExpression
    | ParenthesizedExpression
    | ArrayExpression
    | AnonymousStructExpression
    | ArrayAnonymousStructExpression
    | ArrayValExpression
    | ArrayFunctionExpression

MathematicalOperators ::=
    ADDITION
    | SUBTRACTION
    | MULTIPLY
    | DIVIDE
    | MODULO
    | FLOOR_DIVIDE

LogicalOperators ::=
    AND
    | OR
    | NOT

RelationalOperators ::=
    EQUAL
    | NOT_EQUAL
    | LESS_THAN
    | LESS_THAN_OR_EQUAL
    | GREATER_THAN
    | GREATER_THAN_OR_EQUAL

AssignmentOperators ::=
    MINUS_EQ
    | PLUS_EQ
    | DIV_EQ
    | MUL_EQ

Operators ::=
    MathematicalOperators
    | LogicalOperators
    | RelationalOperators
    | AssignmentOperators

UnaryOperators ::=
    NOT
    | SUBTRACTION

AssignmentExpression ::= PropertyExpression EQ Expression { pin=3 }
BinaryExpression ::= Expression Operators Expression { pin=3 }
UnaryExpression ::= UnaryOperators Expression { pin=1 }
CallExpression ::= PropertyExpression CallArgumentList { pin=1 }
CallBuiltinExpression ::= BuiltinFunctions
ArrayExpression ::= PropertyExpression '[' Expression ']'
ArrayAnonymousStructExpression ::= ArrayAnonymousStruct
AnonymousStructExpression ::= AnonymousStructDeclaration
ArrayValExpression ::= '[' Expression? (',' (Expression | &']'))* ']'
ArrayFunctionExpression ::= CallExpression ArrayFunctionExpressionArgument

ArrayFunctionExpressionArgument ::=  '[' Expression ']' {
    pin=1
}

ParenthesizedExpression ::= '(' ParenthesizedExpressionEnd { pin=1 }
private ParenthesizedExpressionEnd ::= Expression ')'

TernaryExpression ::= Expression '?' TernaryExpressionThen { pin=2 }
private TernaryExpressionThen ::= Expression ':' TernaryExpressionElse
private TernaryExpressionElse ::= Expression

PropertyExpression ::= PropertyExpressionComposite | Identifier
PropertyExpressionComposite ::= Identifier ('.' (Identifier | &')'))* {
    pin(".*")=1
}


LiteralExpression ::=
    LengthLiteral
    | PhysicalLengthLiteral
    | DurationLiteral
    | AngleLiteral
    | RelativeFontSizeLiteral
    | NumericLiteral
    | StringLiteral
    | ColorLiteral
    | BooleanLiteral
    | AlignmentLiteral
    | EasingLiteral

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Functions
/////////////////////////////////////////////////////////////////////////////////////////////////////
BuiltinFunctions ::=
    ImageUrlFunction
    | RadialGradientFunction
    | LinearGradientFunction
    | ChildrenFunction
    | TranslateFunction

private ImageUrlFunction ::= '@image-url' '(' StringLiteral ')' {
    pin=2
}
private TranslateFunction ::= '@tr' '(' TranslateArguments ')' {
    pin=2
}
private TranslateArguments ::= Expression? (',' (Expression | &']'))* {}
private RadialGradientFunction ::= '@radial-gradient' '(' Expression ',' GradientColorPercentageArgumentList ')' {
    pin=2
}
private LinearGradientFunction ::= '@linear-gradient' '(' Expression ',' GradientColorPercentageArgumentList ')' {
    pin=2
}
private GradientColorPercentageArgumentList ::= Expression Expression (',' Expression Expression)* {
    pin(".*")=1
}
private ChildrenFunction ::= '@children'

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Types
/////////////////////////////////////////////////////////////////////////////////////////////////////
Type ::=
    BuiltinType
    | Identifier
    | ArrayType
    | AnonymousStructDefinition

BuiltinType ::=
    'int'
    | 'float'
    | 'bool'
    | 'string'
    | 'color'
    | 'brush'
    | 'physical-length'
    | 'length'
    | 'duration'
    | 'angle'
    | 'easing'
    | 'percent'
    | 'image'
    | 'relative-font-size'

ArrayType ::= '[' Type ']'

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Colors
/////////////////////////////////////////////////////////////////////////////////////////////////////
private BasicColors ::=
    'black'
    | 'silver'
    | 'gray'
    | 'white'
    | 'maroon'
    | 'red'
    | 'purple'
    | 'fuchsia'
    | 'green'
    | 'lime'
    | 'olive'
    | 'yellow'
    | 'navy'
    | 'blue'
    | 'teal'
    | 'aqua'

///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////
private simple_scope_recover ::= !'}'

FieldIdentifier ::= Identifier ':'
ComponentName ::= IDENTIFIER
private Identifier ::= IDENTIFIER
LengthLiteral ::= NUMERIC_LITERAL ('px' | 'pt' | 'in' | 'mm' | 'cm' | '%') { pin=2 }
PhysicalLengthLiteral ::= NUMERIC_LITERAL 'phx' { pin=2 }
DurationLiteral ::= NUMERIC_LITERAL ('ms' | 's') { pin=2 }
AngleLiteral ::= NUMERIC_LITERAL ('deg' | 'rad' | 'turn') { pin=2 }
RelativeFontSizeLiteral ::= NUMERIC_LITERAL 'rem' { pin=2 }
BooleanLiteral ::= 'true' | 'false'
AlignmentLiteral ::= 'stretch' | 'start' | 'center' | 'end' | 'space-between' | 'space-around'
private NumericLiteral ::= NUMERIC_LITERAL
private StringLiteral ::= STRING_LITERAL
private ColorLiteral ::= COLOR_LITERAL | BasicColors
private EasingLiteral ::= 'linear' | 'ease' | 'ease_in' | 'ease_in_out' | 'ease_out'

private CallArgumentList ::= '(' Expression? (',' (Expression | &')'))* ')' {
    pin(".*")=1
}