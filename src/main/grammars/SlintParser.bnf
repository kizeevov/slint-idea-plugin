{
  parserClass='dev.slint.ideaplugin.lang.parser.SlintParser'
  parserUtilClass="dev.slint.ideaplugin.lang.parser.SlintParserUtil"

  implements='dev.slint.ideaplugin.lang.psi.SlintElement'
  extends='dev.slint.ideaplugin.lang.psi.impl.SlintElementImpl'

  elementTypeHolderClass='dev.slint.ideaplugin.lang.psi.SlintElementTypes'
  elementTypeClass='dev.slint.ideaplugin.lang.psi.SlintElementType'
  tokenTypeClass='dev.slint.ideaplugin.lang.psi.SlintTokenType'

  psiClassPrefix='Slint'
  psiImplClassSuffix='Impl'
  psiPackage='dev.slint.ideaplugin.lang.psi'
  psiImplPackage='dev.slint.ideaplugin.lang.psi.impl'

  tokens=[
    IMPORT          = 'import'
    FROM            = 'from'
    EXPORT          = 'export'
    STRUCT          = 'struct'
    ENUM            = 'enum'
    GLOBAL          = 'global'
    COMPONENT       = 'component'
    INHERITS        = 'inherits'

    PROPERTY        = 'property'
    CALLBACK        = 'callback'
    ANIMATE         = 'animate'
    STATES          = 'states'
    TRANSITIONS     = 'transitions'
    PRIVATE         = 'private'
    PUBLIC          = 'public'
    PURE            = 'pure'
    FUNCTION        = 'function'
    IN              = 'in'
    OUT             = 'out'
    IN_OUNT         = 'in-out'

    IF              = 'if'
    FOR             = 'for'
    RETURN          = 'return'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    EQ              = '='
    DOT             = '.'
    COLON           = ':'
    QUEST           = '?'
    EXCL            = '!'
    AT              = '@'
    COMMA           = ','
    COLONEQ          =  ':='

    STRING_LITERAL  = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    IDENTIFIER      = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*'
    WHITE_SPACE     = 'regexp:\s+'

    PARAMETER_LITERAL   = 'regexp:[a-zA-Z_][a-zA-Z_\-0-9]*\s*:'
    TYPE_LITERAL        = 'regexp:[a-zA-Z_][a-zA-Z_\-0-9]*\s*:='

    LINE_COMMENT = 'regexp://.*'
    DOC_COMMENT = 'regexp:/\*.*\*/'
  ]
}

Schema ::= Declaration*

private Declaration ::=
    StructDeclaration
    {
        pin=1
        recoverWhile=Declaration_recover
    }
private Declaration_recover ::= !TopLevelKeywords
private TopLevelKeywords ::= EXPORT | STRUCT | RBRACE

///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct
///////////////////////////////////////////////////////////////////////////////////////////////////
StructDeclaration ::= EXPORT? STRUCT Identifier FieldDeclarationBlock
FieldDeclarationBlock ::= '{' StructFieldDeclarationBlockItem* '}' {
}

private StructFieldDeclarationBlockItem ::=
    StructFieldDeclaration
    {
        consumeTokenMethod="consumeTokenFast"
    }

StructFieldDeclaration ::= PARAMETER_LITERAL FieldType ',' {
    pin=1
    recoverWhile=UntilNewLine_recover
    methods=[getNativeType]
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Component
///////////////////////////////////////////////////////////////////////////////////////////////////
//ComponentDeclaration ::= EXPORT COMPONENT Identifier INHERITS Identifier ComponentDeclarationBlock
//
//ComponentDeclarationBlock ::= LBRACE FieldDeclarationBlockItem* RBRACE

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Types
/////////////////////////////////////////////////////////////////////////////////////////////////////
FieldType ::=
    SingleType
    {
        // implements="org.intellij.prisma.lang.psi.PrismaTypeSignature"
        // mixin="org.intellij.prisma.lang.psi.impl.PrismaFieldTypeMixin"
        methods=[getTypeReference]
    }
SingleType ::= Identifier

///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////
private Identifier ::= IDENTIFIER
private UntilNewLine_recover ::= !<<isNewLine>>
