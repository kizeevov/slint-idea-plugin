{
  parserClass='dev.slint.ideaplugin.lang.parser.SlintParser'
  parserUtilClass="dev.slint.ideaplugin.lang.parser.SlintParserUtil"

  implements='dev.slint.ideaplugin.lang.psi.SlintElement'
  extends='dev.slint.ideaplugin.lang.psi.impl.SlintElementImpl'

  elementTypeHolderClass='dev.slint.ideaplugin.lang.psi.SlintElementTypes'
  elementTypeClass='dev.slint.ideaplugin.lang.psi.SlintElementType'
  tokenTypeClass='dev.slint.ideaplugin.lang.psi.SlintTokenType'

  psiClassPrefix='Slint'
  psiImplClassSuffix='Impl'
  psiPackage='dev.slint.ideaplugin.lang.psi'
  psiImplPackage='dev.slint.ideaplugin.lang.psi.impl'

  tokens=[
    IMPORT          = 'import'
    FROM            = 'from'
    EXPORT          = 'export'
    STRUCT          = 'struct'
    ENUM            = 'enum'
    GLOBAL          = 'global'
    COMPONENT       = 'component'
    INHERITS        = 'inherits'

    PROPERTY        = 'property'
    CALLBACK        = 'callback'
    ANIMATE         = 'animate'
    STATES          = 'states'
    TRANSITIONS     = 'transitions'
    PRIVATE         = 'private'
    PUBLIC          = 'public'
    PURE            = 'pure'
    FUNCTION        = 'function'
    IN              = 'in'
    OUT             = 'out'
    IN_OUNT         = 'in-out'

    IF              = 'if'
    FOR             = 'for'
    RETURN          = 'return'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    EQ              = '='
    DOT             = '.'
    COLON           = ':'
    QUEST           = '?'
    EXCL            = '!'
    AT              = '@'
    ATAT            = '@@'
    COMMA           = ','

    // STRING_LITERAL  = 'regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?'
    STRING_LITERAL  = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    IDENTIFIER      = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*'
    WHITE_SPACE     = 'regexp:\s+'

    LINE_COMMENT = 'regexp://.*'
    DOC_COMMENT = 'regexp:/\*.*\*/'
  ]

//  extends('FunctionCall|ArrayExpression|LiteralExpression|PathExpression')=Expression
//  extends('LiteralExpression')=Expression


//  implements('(Model|Type|View|Enum|Datasource|Generator)Declaration|TypeAlias')='dev.slint.ideaplugin.lang.psi.SlintDeclaration'
//  implements('(Model|Type|View|Enum)Declaration|TypeAlias')='dev.slint.ideaplugin.lang.psi.SlintEntityDeclaration'
//  implements('(Datasource|Generator)Declaration')='dev.slint.ideaplugin.lang.psi.SlintKeyValueDeclaration'
//
//  implements('(Model|Type|View)Declaration')='dev.slint.ideaplugin.lang.psi.SlintTableEntityDeclaration'
//  mixin('(Model|Type|View)Declaration')='dev.slint.ideaplugin.lang.psi.impl.SlintTableEntityDeclarationMixin'
//  pin('(Model|Type|View)Declaration')=1
//
//  implements('.*Block')='dev.slint.ideaplugin.lang.psi.SlintBlock'
//  mixin('.*Block')='dev.slint.ideaplugin.lang.psi.impl.SlintBlockMixin'
//
//  implements('FieldDeclaration|EnumValueDeclaration|KeyValue')='dev.slint.ideaplugin.lang.psi.SlintMemberDeclaration'
//  implements('(Field|Block)Attribute')='dev.slint.ideaplugin.lang.psi.SlintArgumentsOwner'
//
//  extends('NamedArgument|ValueArgument')=Argument
//
//  extends('UnsupportedOptionalListType|ListType|OptionalType|LegacyRequiredType|LegacyListType|SingleType')=FieldType
//
//  implements('FieldDeclaration')='dev.slint.ideaplugin.lang.psi.SlintTypeOwner'
//  implements('FieldDeclaration|EnumValueDeclaration')='dev.slint.ideaplugin.lang.psi.SlintFieldAttributeOwner'
}

functionName ::= IDENTIFIER

//typeName ::= IDENTIFIER
//
//listType ::= typeName LBRACKET RBRACKET


// Schema ::= Declaration*
//
//private Declaration ::=
//    ModelDeclaration
//    | EnumDeclaration
//    | ViewDeclaration
//    | DatasourceDeclaration
//    | GeneratorDeclaration
//    | TypeAlias
//    | TypeDeclaration
//    {
//        pin=1
//        recoverWhile=Declaration_recover
//    }
//private Declaration_recover ::= !TopLevelKeywords
//private TopLevelKeywords ::= MODEL | TYPE | VIEW | ENUM | GENERATOR | DATASOURCE
//
//ModelDeclaration ::= MODEL Identifier FieldDeclarationBlock
//TypeDeclaration ::= TYPE Identifier FieldDeclarationBlock
//ViewDeclaration ::= VIEW Identifier FieldDeclarationBlock
//
//FieldDeclarationBlock ::= '{' FieldDeclarationBlockItem* '}' {
//}
//
//private FieldDeclarationBlockItem ::=
//    FieldDeclaration
//    | BlockAttribute
//    | <<consumeWithError '@' "parser.unexpected.field.attr">>
//    {
//        consumeTokenMethod="consumeTokenFast"
//    }
//
//FieldDeclaration ::= IDENTIFIER ':'? FieldType? FieldAttribute* {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintFieldDeclarationMixin"
//    pin=1
//    recoverWhile=UntilNewLine_recover
//    methods=[getNativeType]
//}
//
//EnumDeclaration ::= ENUM Identifier EnumDeclarationBlock {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintEnumDeclarationMixin"
//    pin=1
//}
//EnumDeclarationBlock ::= '{' (EnumValueDeclaration | BlockAttribute)* '}' {
//    pin=1
//}
//EnumValueDeclaration ::= Identifier FieldAttribute* {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintEnumValueDeclarationMixin"
//    pin=1
//    recoverWhile=UntilNewLine_recover
//}

//DatasourceDeclaration ::= DATASOURCE Identifier KeyValueBlock {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintKeyValueDeclarationMixin"
//    pin=1
//}
//GeneratorDeclaration ::= GENERATOR Identifier KeyValueBlock {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintKeyValueDeclarationMixin"
//    pin=1
//}
//
//KeyValueBlock ::= '{' KeyValue* '}' {
//    pin=1
//}
KeyValue ::= Identifier '=' Expression {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintKeyValueMixin"
    pin=1
//    recoverWhile=UntilNewLine_recover
}

//TypeAlias ::= TYPE Identifier '=' FieldType FieldAttribute* {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintTypeAliasMixin"
//    pin=3
//}
//
///* Types */
//FieldType ::=
//    UnsupportedOptionalListType
//    | ListType
//    | OptionalType
//    | LegacyRequiredType
//    | LegacyListType
//    | SingleType
//    {
//        implements="dev.slint.ideaplugin.lang.psi.SlintTypeSignature"
//        mixin="dev.slint.ideaplugin.lang.psi.impl.SlintFieldTypeMixin"
//        methods=[getTypeReference]
//    }
//
//UnsupportedType ::= UNSUPPORTED '(' STRING_LITERAL ')' {
//    pin=1
//    recoverWhile=UnsupportedType_recover
//    methods=[identifier="UNSUPPORTED"]
//}
//private UnsupportedType_recover ::= !(')' | '}' | '@' | '@@' | IDENTIFIER | '?' | '[' | ']' | TopLevelKeywords)
//
//TypeReference ::= UnsupportedType | Identifier {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintTypeReferenceMixin"
//    implements="dev.slint.ideaplugin.lang.psi.SlintReferenceElement"
//}
//UnsupportedOptionalListType ::= TypeReference '[' ']' '?'
//ListType ::= TypeReference '[' ']'
//OptionalType ::= TypeReference '?'
//LegacyRequiredType ::= TypeReference '!'
//LegacyListType ::= '[' TypeReference ']'
//SingleType ::= TypeReference
//
///* Attributes */
//BlockAttribute ::= '@@' !<<isWhiteSpace>> PathExpression ArgumentsList? {
//    pin=1
//}
//FieldAttribute ::= '@' !<<isWhiteSpace>> PathExpression ArgumentsList? {
//    pin=1
//}
//
///* Arguments */
//ArgumentsList ::= '(' [Argument (',' Argument)*] ','? ')' {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintArgumentsListMixin"
//    methods=[
//        Arguments="Argument"
//        findArgumentByName
//    ]
//}
//Argument ::= NamedArgument | ValueArgument
//NamedArgument ::= Identifier ':' Expression {
//    pin=2
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintNamedArgumentMixin"
//    implements="dev.slint.ideaplugin.lang.psi.SlintReferenceElement"
//}
//ValueArgument ::= Expression {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintValueArgumentMixin"
//    methods=[isDefault]
//}

/* Expressions */
//Expression ::=
//    FunctionCall
//    | ArrayExpression
//    | LiteralExpression
//    | PathExpression

//FunctionCall ::= PathExpression ArgumentsList {
//    implements="dev.slint.ideaplugin.lang.psi.SlintArgumentsOwner"
//}
//ArrayExpression ::= '[' [Expression (',' Expression)* ','?] ']' {
//    pin=1
//}
//LiteralExpression ::= NUMERIC_LITERAL | STRING_LITERAL {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintLiteralExpressionMixin"
//    methods=[getValue]
//}
//PathExpression ::= !<<isNewLine>> Path PathMemberAccess* {
//    mixin="dev.slint.ideaplugin.lang.psi.impl.SlintPathExpressionMixin"
//    implements="dev.slint.ideaplugin.lang.psi.SlintQualifiedReferenceElement"
//}

///* Path */
//Path ::= Identifier { elementType=PathExpression }
//left PathMemberAccess ::= '.' Identifier? { elementType=PathExpression }

private Identifier ::= IDENTIFIER

///* Utils */
//private UntilNewLine_recover ::= !<<isNewLine>>