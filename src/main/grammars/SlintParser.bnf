{
  parserClass='dev.slint.ideaplugin.lang.parser.SlintParser'
  parserUtilClass="dev.slint.ideaplugin.lang.parser.SlintParserUtil"

  implements='dev.slint.ideaplugin.lang.psi.SlintElement'
  extends='dev.slint.ideaplugin.lang.psi.impl.SlintElementImpl'

  elementTypeHolderClass='dev.slint.ideaplugin.lang.psi.SlintElementTypes'
  elementTypeClass='dev.slint.ideaplugin.lang.psi.SlintElementType'
  tokenTypeClass='dev.slint.ideaplugin.lang.psi.SlintTokenType'

  psiClassPrefix='Slint'
  psiImplClassSuffix='Impl'
  psiPackage='dev.slint.ideaplugin.lang.psi'
  psiImplPackage='dev.slint.ideaplugin.lang.psi.impl'

  tokens=[
    IMPORT          = 'import'
    FROM            = 'from'
    EXPORT          = 'export'
    STRUCT          = 'struct'
    ENUM            = 'enum'
    GLOBAL          = 'global'
    COMPONENT       = 'component'
    INHERITS        = 'inherits'

    PROPERTY        = 'property'
    CALLBACK        = 'callback'
    ANIMATE         = 'animate'
    STATES          = 'states'
    TRANSITIONS     = 'transitions'
    PRIVATE         = 'private'
    PUBLIC          = 'public'
    PURE            = 'pure'
    FUNCTION        = 'function'
    IN              = 'in'
    OUT             = 'out'
    IN_OUNT         = 'in-out'

    IF              = 'if'
    FOR             = 'for'
    RETURN          = 'return'

    LBRACE          = '{'
    RBRACE          = '}'
    LPAREN          = '('
    RPAREN          = ')'
    LBRACKET        = '['
    RBRACKET        = ']'
    EQ              = '='
    DOT             = '.'
    COLON           = ':'
    SEMICOLON       = ';'
    QUEST           = '?'
    EXCL            = '!'
    AT              = '@'
    COMMA           = ','

    ADDITION        = '+'
    SUBTRACTION     = '-'
    MULTIPLY        = '*'
    DIVIDE          = '/'
    MODULO          = '%'
    FLOOR_DIVIDE    = '\'

    STRING_LITERAL  = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    NUMERIC_LITERAL = 'regexp:-?\d+(\.\d+)?'
    COLOR_LITERAL   = 'regexp:#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})'
    LENGTH_LITERAL  = 'regexp:-?\d+(\.\d+)?(px|pt|in|mm|cm|%)'
    DURATION_LITERAL= 'regexp:-?\d+(\.\d+)?(ms|s)'
    IDENTIFIER      = 'regexp:[a-zA-Z][a-zA-Z0-9\-_]*'
    WHITE_SPACE     = 'regexp:\s+'

    PARAMETER_LITERAL   = 'regexp:[a-zA-Z_][a-zA-Z_\-0-9]*\s*:'
    TYPE_LITERAL        = 'regexp:[a-zA-Z_][a-zA-Z_\-0-9]*\s*:='

    LINE_COMMENT = 'regexp://.*'
    DOC_COMMENT = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
  ]

  extends(".*Expression")=Expression
}

Schema ::= Declaration*

private Declaration ::=
    ImportDeclaration
    | StructDeclaration
    | ComponentDeclaration
    {
        pin=1
        recoverWhile=Declaration_recover
    }
private Declaration_recover ::= !TopLevelKeywords
private TopLevelKeywords ::= EXPORT | IMPORT | STRUCT | COMPONENT

///////////////////////////////////////////////////////////////////////////////////////////////////
// Import
///////////////////////////////////////////////////////////////////////////////////////////////////
ImportDeclaration ::= IMPORT ImportElementDeclarationBlock? ImportPathDeclaration ';'
ImportPathDeclaration ::= STRING_LITERAL
ImportElementDeclarationBlock ::= LBRACE (Identifier ','?)* RBRACE FROM

///////////////////////////////////////////////////////////////////////////////////////////////////
// Struct
///////////////////////////////////////////////////////////////////////////////////////////////////
StructDeclaration ::= EXPORT? STRUCT Identifier StructFieldDeclarationBlock
StructFieldDeclarationBlock ::= LBRACE StructFieldDeclarationBlockItem* RBRACE

private StructFieldDeclarationBlockItem ::=
    StructFieldDeclaration
    {
        consumeTokenMethod="consumeTokenFast"
    }

StructFieldDeclaration ::= StructFieldName FieldType ','
StructFieldName ::= PARAMETER_LITERAL

///////////////////////////////////////////////////////////////////////////////////////////////////
// Component
///////////////////////////////////////////////////////////////////////////////////////////////////
ComponentDeclaration ::= EXPORT? COMPONENT? Identifier (INHERITS Identifier)? ComponentFieldDeclarationBlock
ComponentFieldDeclarationBlock ::= LBRACE ComponentFieldDeclarationBlockItem* RBRACE

private ComponentFieldDeclarationBlockItem ::=
    ComponentPropertyDeclaration
    | ComponentCallbackPropertyDeclaration
    | ComponentCallbackDeclaration
    | ElementFieldDeclaration
    | ComponentElementDeclaration
    | ComponentAnimateDeclaration
    | ComponentStatesDeclaration
    {
        consumeTokenMethod="consumeTokenFast"
    }

private ComponentPropertyDeclaration ::= (PRIVATE | IN | OUT | IN_OUNT)? PROPERTY '<' Identifier  '>' PropertyName ';'

private ComponentCallbackPropertyDeclaration ::= CALLBACK Identifier (ComponentCallbackPropertyReturnDeclaration | ComponentCallbackPropertyBindingDeclaration)? ';'
private ComponentCallbackPropertyReturnDeclaration ::= ComponentCallbackPropertyParametersDeclaration ('->' FieldType)?
private ComponentCallbackPropertyParametersDeclaration ::= LPAREN (FieldType ','?)* RPAREN
private ComponentCallbackPropertyBindingDeclaration ::= '<=>' PropertyExpression

private ElementFieldDeclaration ::= ComponentFieldName Expression SEMICOLON

private ComponentElementDeclaration ::= TYPE_LITERAL? ComponentDeclaration

private ComponentAnimateDeclaration ::= ANIMATE ComponentDeclaration

private ComponentCallbackDeclaration ::= Identifier '=>' ComponentCallbackDeclarationBlock
private ComponentCallbackDeclarationBlock ::= LBRACE ComponentCallbackDeclarationBlockItems* RBRACE
private ComponentCallbackDeclarationBlockItems ::= Expression SEMICOLON

private ComponentStatesDeclaration ::= STATES LBRACKET

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Expressions
/////////////////////////////////////////////////////////////////////////////////////////////////////
Expression ::=
    TernaryExpression
    | BinaryExpression
    | UnaryExpression
    | AssignmentExpression
    | PropertyExpression
    | ColorExpression
    | LengthExpression
    | DurationExpression
    | NumericExpression
    | BooleanExpression
    | StringExpression
    | AlignmentExpression
    | CallExpression

MathematicalOperators ::=
    ADDITION
    | SUBTRACTION
    | MULTIPLY
    | DIVIDE
    | MODULO
    | FLOOR_DIVIDE

Operators ::=
    MathematicalOperators
//    | LogicalOperators
//    | RelationalOperators
//    | UNWRAP_OR

BinaryExpression ::= Expression Operators Expression

UnaryOperators ::=
    EXCL
    | SUBTRACTION

UnaryExpression ::=
    UnaryOperators Expression

AssignmentExpression ::= PropertyExpression EQ Expression
TernaryExpression ::= Expression QUEST Expression ':' Expression
CallExpression ::= PropertyExpression LPAREN Expression RPAREN
BooleanExpression ::= 'true' | 'false'
StringExpression ::= STRING_LITERAL
PropertyExpression ::= Identifier '.' Identifier
ColorExpression ::= COLOR_LITERAL | BasicColors
NumericExpression ::= NUMERIC_LITERAL
LengthExpression ::= LENGTH_LITERAL
DurationExpression ::= DURATION_LITERAL
AlignmentExpression ::= 'stretch' | 'start' | 'center' | 'end' | 'space-between' | 'space-around'

/////////////////////////////////////////////////////////////////////////////////////////////////////
//// Types
/////////////////////////////////////////////////////////////////////////////////////////////////////
FieldType ::=
    'int'
    | 'float'
    | 'bool'
    | 'string'
    | 'color'
    | 'brush'
    | 'physical-length'
    | 'length'
    | 'duration'
    | 'angle'
    | 'easing'
    | 'percent'
    | 'image'
    | 'relative-font-size'

///////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
///////////////////////////////////////////////////////////////////////////////////////////////////
private Identifier ::= IDENTIFIER
private PropertyName ::= Identifier
private ComponentFieldName ::= PARAMETER_LITERAL
private BasicColors ::=
    'black'
    | 'silver'
    | 'gray'
    | 'white'
    | 'maroon'
    | 'red'
    | 'purple'
    | 'fuchsia'
    | 'green'
    | 'lime'
    | 'olive'
    | 'yellow'
    | 'navy'
    | 'blue'
    | 'teal'
    | 'aqua'
